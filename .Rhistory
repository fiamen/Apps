q()
ls()
library("googleVis", lib.loc="~/R/win-library/3.0")
library("devtools", lib.loc="~/R/win-library/3.0")
install.packages("C:/Users/Mario/Downloads/Rtools31.exe", repos = NULL)
find_rtools()
library("gtools", lib.loc="~/R/win-library/3.0")
library("rstudio", lib.loc="~/R/win-library/3.0")
detach("package:rstudio", unload=TRUE)
detach("package:gtools", unload=TRUE)
library("tools", lib.loc="C:/Program Files/R/R-3.0.2/library")
install.packages('Rtools')
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height = 400))
print(M, "chart")
load(Fruit)
G <- gvisGeoChart(Exports, locationvar = "Country", colorvar = "Profit", options = list(width =
height = 400))
print(G, "chart")
G <- gvisGeoChart(Exports, locationvar = "Country", colorvar = "Profit", options = list(width = height = 400))
print(G, "chart")
M <- gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height = 400))
print(M, "chart")
M <- gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height = 400))
print(M, "chart")
data(Fruits)
?data
?load
table(Fruits)
View(Fruits)
View(Fruits)
install.pakages(Rtools)
install.packages("~/R/win-library/3.0 [Default]/Rtools.txt", repos = NULL)
install.pakages(Rtools)
install.packages('Rtools')
detach("package:googleVis", unload=TRUE)
install.packages("shiny")
library("shiny", lib.loc="~/R/win-library/3.0")
library("swirl", lib.loc="~/R/win-library/3.0")
swirl
swirl()
(TRUE != FALSE)
4 != 4.0
FALSE && 6 >= 6 || 7 >= 8 || 50 <= 49.5
6>7
isTRUE(6>7)
xor(5 == 6, !FALSE)
xor(6 == 6, !FALSE)
ints <- sample(10)
ints
which(ints<=1)
library("swirl", lib.loc="~/R/win-library/3.0")
flags
swirl()
flags
summary(flags)
viewinfo()
vapply(flags, class, character(1))
vapply(flags, class, character(1))
vapply(flags, class, character(1))
quit()
rbinom(100,2,0.7)
rbinom(100,100,0.7)
rbinom(1,100,0.7)
rbinom(1,100,0.7)
rbinom(1,100,0.7)
rbinom(1,200,0.7)
rbinom(1,200,0.5)
rbinom(10,200,0.5)
rbinom(10,100:200,0.5)
x=4L
class(x)
x
x=c(4,T)
x
class(x)
setwd("C:/BI/R/coursera/Cousera Apps/project")
source('~/.active-rstudio-document')
print(load(con))
library("sp", lib.loc="~/R/win-library/3.0")
summary(gadm)
qld<-gadm[gadm$NAME_2=="Queensland",]
qld<-gadm[gadm$NAME_2=="Queensland",]
gadm$NAME_2
gadm1<-gadm[gadm$NAME_2=="Queensland",]
qld<-gadm[gadm$NAME_1=="Queensland",]
rm(gadm)
?spplot
spplot(qld,zcol=1)
crash<-read.csv("QLD_ROAD_CRASH.csv")
View(crash)
summary(qld)
with(qld,summary(NAME_2))
with(qld,summary(PID))
summary(qld$PID)
?with
summary(qld$ISO)
(qld$ISO)
summary(qld)
summary(qld_ID_1)
summary(qld$ID_1)
(qld$ID_1)
?spplot
setwd("C:/BI/R/coursera/Cousera Apps/Tutorial/App-2- website")
runApp()
library("shiny", lib.loc="~/R/win-library/3.0")
runApp()
setwd("C:/BI/R/coursera/Cousera Apps/project")
runApp()
source("basic.R")
setwd("C:/BI/R/coursera/Cousera Apps/project")
runApp()
runApp()
runApp()
runApp()
runApp()
getwd()
runApp()
runApp()
runApp()
runApp()
?numericInput
runApp()
runApp()
runApp()
library("shinyapps", lib.loc="~/R/win-library/3.0")
setwd("C:/BI/R/coursera/Cousera Apps/Examples/App-3")
runApp()
setwd("C:/BI/R/coursera/Cousera Apps/project")
runApp()
runApp()
runApp()
runApp()
setwd("C:/BI/R/coursera/Cousera Apps/project")
runApp()
con <- "./data/AUS_adm2.RData"
print(load(con))
rm(gadm)
load("./data/AUS_adm2.RData")
runApp()
getwd()
runApp()
library("shiny", lib.loc="~/R/win-library/3.0")
runApp()
runApp()
runApp()
?spplot
spplot(qld,zcol=1)
spplot(qld,zcol=1,height=10)
spplot(qld,zcol=1,heights=10)
spplot(qld,zcol=1,heights=100)
spplot(qld,zcol=1,sp.layout=list(l2,l3,l4,l5))
library(lattice)
trellis.par.set(sp.theme()) # sets bpy.colors() ramp
data(meuse)
coordinates(meuse) <- ~x+y
l2 = list("SpatialPolygonsRescale", layout.north.arrow(), offset = c(181300,329800),
scale = 400)
l3 = list("SpatialPolygonsRescale", layout.scale.bar(), offset = c(180500,329800),
scale = 500, fill=c("transparent","black"))
l4 = list("sp.text", c(180500,329900), "0")
l5 = list("sp.text", c(181000,329900), "500 m")
spplot(meuse, c("ffreq"), sp.layout=list(l2,l3,l4,l5), col.regions= "black",
pch=c(1,2,3), key.space=list(x=0.1,y=.95,corner=c(0,1)))
spplot(meuse, c("zinc", "lead"), sp.layout=list(l2,l3,l4,l5, which = 2),
key.space=list(x=0.1,y=.95,corner=c(0,1)))
# plotting factors:
meuse$f = factor(sample(letters[6:10], 155, replace=TRUE),levels=letters[1:10])
meuse$g = factor(sample(letters[1:5], 155, replace=TRUE),levels=letters[1:10])
spplot(meuse, c("f","g"), col.regions=bpy.colors(10))
if (require(RColorBrewer)) {
spplot(meuse, c("ffreq"), sp.layout=list(l2,l3,l4,l5),
col.regions=brewer.pal(3, "Set1"))
}
data(meuse.grid)
gridded(meuse.grid)=~x+y
meuse.grid$g = factor(sample(letters[1:5], 3103, replace=TRUE),levels=letters[1:10])
meuse.grid$f = factor(sample(letters[6:10], 3103, replace=TRUE),levels=letters[1:10])
spplot(meuse.grid, c("f","g"))
spplot(meuse.grid, c("f","g"), col.regions=bpy.colors(10))
spplot(qld,zcol=1,height=10)
runApp()
runApp()
runApp()
?spplot
spplot.grid(qld,zcol=1,height=10)
library(lattice)
trellis.par.set(sp.theme()) # sets bpy.colors() ramp
data(meuse)
coordinates(meuse) <- ~x+y
l2 = list("SpatialPolygonsRescale", layout.north.arrow(), offset = c(181300,329800),
scale = 400)
l3 = list("SpatialPolygonsRescale", layout.scale.bar(), offset = c(180500,329800),
scale = 500, fill=c("transparent","black"))
l4 = list("sp.text", c(180500,329900), "0")
l5 = list("sp.text", c(181000,329900), "500 m")
spplot(meuse, c("ffreq"), sp.layout=list(l2,l3,l4,l5), col.regions= "black",
pch=c(1,2,3), key.space=list(x=0.1,y=.95,corner=c(0,1)))
library("maps", lib.loc="~/R/win-library/3.0")
?map
map(qld, fill = TRUE, col = fills,
resolution = 0, lty = 0, projection = "polyconic",
myborder = 0, mar = c(0,0,0,0))
county
"county"
data(italyMapEnv)
data("data/AUS_adm2.RData"
)
getwd()
data("./data/AUS_adm2.RData")
?data
italyMapENv
map('italy', fill = TRUE, col = 1:10)
data(world.cities)
View(world.cities)
map(world.cities, fill = TRUE, col = 1:10)
map("state")
data(state)
v<-as.data.frame(state)
v<-data.frame(state)
state.abb
state.x77
View(state.x77)
runApp()
runApp()
runApp()
?a
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("C:/BI/R/coursera/Cousera Apps/Tutorial/App-5-data")
runApp()
setwd("C:/BI/R/coursera/Cousera Apps/Tutorial/stockVis")
runApp()
setwd("C:/BI/R/coursera/Cousera Apps/project")
runApp()
load("C:/BI/R/coursera/Cousera Apps/project/data/AUS_adm2.RData")
load("C:/BI/R/coursera/Cousera Apps/project/data/AUS_adm2.RData")
str(gadm)
summary(gadm)
t<-data.frame(gadm)
View(t)
l<-list(gadm)
library("sp", lib.loc="~/R/win-library/3.0")
l[1]
l[1][1]
str(l)
class(l)
l[polygon]
l[@polygon]
l[[1]]
?spplot
# Road crash locations - Queensland
library("googleVis", lib.loc="~/R/win-library/3.0")
G1 <- gvisGeoMap(Exports, locationvar='Country', numvar='Profit',
options=list(dataMode="regions"))
plot(G1)
M <- gvisMotionChart(Fruits, idvar="Fruit", timevar="Year")
gdgt <- createGoogleGadget(M)
cat(gdgt)
df=data.frame(country=c("US", "GB", "BR"), val1=c(1,3,4), val2=c(23,12,32))
## Area chart
Area1 <- gvisAreaChart(df, xvar="country", yvar=c("val1", "val2"))
plot(Area1
View(df)
View(df)
df=data.frame(country=c("US", "GB", "BR"), val1=c(1,3,4), val2=c(23,12,32))
## Area chart
Area1 <- gvisAreaChart(df, xvar="country", yvar=c("val1", "val2"))
plot(Area1)
df=data.frame(country=c("US", "GB", "BR"), val1=c(1,3,4), val2=c(23,12,32))
## Area chart
Area1 <- gvisAreaChart(df, xvar="country", yvar=c("val1", "val2"))
plot(Area1
require(stats)
data(quakes)
head(quakes)
quakes$latlong<-paste(quakes$lat, quakes$long, sep=":")
G7 <- gvisGeoChart(quakes, "latlong", "depth", "mag",
options=list(displayMode="Markers", region="009",
colorAxis="{colors:['red', 'grey']}",
backgroundColor="lightblue"))
plot(G7)
df=data.frame(country=c("US", "GB", "BR"), val1=c(1,3,4), val2=c(23,12,32))
Intensity1 <- gvisIntensityMap(df, locationvar="country", numvar=c("val1", "val2"))
plot(Intensity1)
View(df)
data(Regions)
data
region
(Regions)
G1 <- gvisGeoMap(Exports, locationvar='Country', numvar='Profit',
options=list(dataMode="regions"))
plot(G1)
install.packages("ggmap")
library("ggmap", lib.loc="~/R/win-library/3.0")
library("googleVis", lib.loc="~/R/win-library/3.0")
ggmap(get_map(maptype = 'satellite'), extent = 'device') +
stat_density2d(aes(x = lon, y = lat, colour = class), data = chkpts, bins = 5)
library(grid)
baylor <- get_map('baylor university', zoom = 15, maptype = 'satellite')
ggmap(baylor)
getwd()
runApp
runApp()
runApp()
runApp()
runApp()
